$transition-length: 0.15s;

* {
    box-sizing: border-box;
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: grayscale;
}

html,
body {
    margin: 0;
    width: 100vw;
    height: 100vh;
    font-family: "Open Sans", sans-serif;
    font-size: 14px;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    background: #FFF;
}

.Reaction {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 5px;
    height: 24px;
    font-size: 11/14 * 1rem;
    font-weight: 600;
    color: rgba(#3d3c40, 0.64);
    line-height: 24px;
    text-decoration: none;
    border-radius: 4px;
    border: solid 1px transparent;
    background: rgba(#3D3C40, .08);
    overflow: hidden;

    &:hover {
        color: rgba(#3d3c40, 0.72);
        border: solid 1px rgba(#3D3C40, .16);
        background-color: transparent;
    }

    &:active,
    &--selected {
        color: #166DE0;
        border-color: #166DE0;
        background-color: rgba(#166DE0, .06);
    }

    &--selected:hover {
        color: #166DE0;
        border-color: #166DE0;
        background-color: transparent;
    }

    &__emoji {
        margin-right: 3px;
        font-size: 12/14 * 1rem;
        pointer-events: none;
        color: #000;
    }

    &__count {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-start;
        pointer-events: none;
        overflow: hidden;
    }

    &__count-numeral {
        position: relative;

        &::before,
        &::after {
            position: absolute;
            left: 0;
        }
        &::before {
            content: attr(data-previous-value);
            bottom: 100%;
        }
        &::after {
            content: attr(data-next-value);
            top: 100%;
        }

        &--hidden {
            visibility: hidden;
        }
    }

    &--transition {

        &-up {
            .Reaction__count-numeral--updating {
                transform: translate3d(0, -100%, 0);
            }
        }
        &-down {
            .Reaction__count-numeral--updating {
                transform: translate3d(0, 100%, 0);
            }
        }
    }

}

.enable-animations {
    .Reaction {
        &--animate {
            .Reaction__count {
                &-numeral {
                    transition:
                        transform $transition-length 0s ease-in-out;
                }
            }
        }
    }
}