.Button {
    // approach 1
    // - colours provided directly
    // - hex and rgb segments
    // - uses opacity

    --button-primary: #1c58d9;
    --button-primary-rgb: 221, 77, 48;
    --button-secondary: #ffffff;
    --button-secondary-rgb: 255, 255, 255;
    --button-neutral: #3f4350;
    --button-neutral-rgb: 63, 67, 80;
    --button-highlight: #000000;
    --button-highlight-rgb: 0, 0, 0;
    --button-destructive: #d24b4e;
    --button-destructive-rgb: 210, 75, 78;

    // approach 2
    // - primary and destructive colours provided in hsl segments
    // - all other colours are derived

    --button-primary-hue: 221deg;
    --button-primary-saturation: 77%;
    --button-primary-lightness: 48%;

    --button-primary-color: hsl(
        var(--button-primary-hue),
        var(--button-primary-saturation),
        var(--button-primary-lightness)
    );
    --button-primary-color-hsl: var(--button-primary-hue), var(--button-primary-saturation),
        var(--button-primary-lightness);
    --button-secondary-color: hsl(var(--button-primary-hue), 25%, 99%);
    --button-secondary-color-hsl: var(--button-primary-hue), 25%, 99%;
    --button-neutral-color: hsl(var(--button-primary-hue), 25%, 15%);
    --button-neutral-color-hsl: var(--button-primary-hue), 25%, 15%;
    --button-highlight-color: hsl(var(--button-primary-hue), 25%, 98%);
    --button-highlight-color-hsl: var(--button-primary-hue), 25%, 98%;
    --button-lowlight-color: hsl(var(--button-primary-hue), 25%, 2%);
    --button-lowlight-color-hsl: var(--button-primary-hue), 25%, 2%;
    --button-destructive-color: hsl(359, 60%, 56%);
    --button-destructive-color-hsl: 359, 60%, 56%;

    // approach 3
    // - primary, optional secondary for components that need and destructive colours provided in hsl segments
    // - all other colours are derived
    // - minimized use of transparency to maximize compatibility with a majority of backgrounds
    // - adapt to light/dark surroundings

    --button-background-hue: 221deg;

    --button-primary-hue: 221deg;
    --button-primary-hsl: 221deg, 77%, 48%;

    --button-destructive-hue: 359deg;
    --button-destructive-hsl: 359deg, 60%, 56%;

    --button-light-hsl: var(--button-background-hue), 15%, 99%;
    --button-mid-hsl: var(--button-background-hue), 15%, 50%;
    --button-dark-hsl: var(--button-background-hue), 15%, 1%;

    display: inline-flex;
    justify-content: center;
    align-items: center;
    position: relative;
    padding: 0 16px;
    height: 40px;
    font-family: 'Open Sans', sans-serif;
    font-size: 14px;
    font-weight: 600;
    line-height: 1;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    outline: none;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    overflow: hidden;
    cursor: pointer;

    // elements (icons, label)
    .Button_icon {
        z-index: 2;
    }
    .Button_label {
        margin: 0 8px;
        z-index: 2;

        &:first-child {
            margin-left: 0;
        }
        &:last-child {
            margin-right: 0;
        }
    }

    // states
    // - ::before used for background shades, ::after used for inside border
    &::before,
    &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        border-radius: 4px;
        border: solid 2px transparent;
        background: transparent;
        z-index: 1;
    }

    // - primary states

    &__primary {
        color: hslColor(--button-light-hsl);
        background: hslColor(--button-primary-hsl);

        &[destructive] {
            background: hslColor(--button-destructive-hsl);
        }

        &[inverted] {
            color: hslColor(--button-primary-hsl);
            background: hslColor(--button-light-hsl);
        }

        &:hover,
        &.hover {
            &::before {
                background: hslColor(--button-dark-hsl, 0.08);
            }

            &[inverted] {
                &::before {
                    background: hslColor(--button-primary-hsl, 0.08);
                }
            }
        }
        &:active,
        &.active {
            &::before {
                background: hslColor(--button-dark-hsl, 0.16);
            }

            &[inverted] {
                &::before {
                    background: hslColor(--button-primary-hsl, 0.16);
                }
            }
        }
        &:focus,
        &.focus {
            &::after {
                border-color: hslColor(--button-light-hsl, 0.48);
            }

            &[inverted] {
                &::after {
                    border-color: hslColor(--button-primary-hsl, 0.48);
                }
            }
        }
        &:focus:not(:focus-visible) {
            &::after {
                border-color: transparent;
            }

            &[inverted] {
                &::after {
                    border-color: transparent;
                }
            }
        }
        &:focus-visible {
            &::after {
                border-color: hslColor(--button-light-hsl, 0.48);
            }

            &[inverted] {
                &::after {
                    border-color: hslColor(--button-primary-hsl, 0.48);
                }
            }
        }

        &[disabled] {
            cursor: not-allowed;

            &,
            &:hover,
            &.hover,
            &:focus,
            &:focus-visible,
            &.focus,
            &:active,
            &.active {
                color: hslColor(--button-dark-hsl, 0.32);
                background: hslColor(--button-light-hsl);

                &::before {
                    background: hslColor(--button-dark-hsl, 0.08);
                }

                &::after {
                    border: none;
                }
            }
        }
    }

    // - secondary states

    &__secondary {
        color: hslColor(--button-primary-color-hsl);
        background: hslColor(--button-primary-color-hsl, 0);

        &::after {
            border-width: 1px;
            border-color: hslColor(--button-primary-color-hsl);
        }

        &[destructive] {
            color: hslColor(--button-destructive-color-hsl);

            &::after {
                border-color: hslColor(--button-destructive-color-hsl);
            }
        }

        &[inverted] {
            color: hslColor(--button-secondary-color-hsl);

            &::after {
                border-color: hslColor(--button-secondary-color-hsl);
            }
        }

        &:hover,
        &.hover {
            &::before {
                background: hslColor(--button-primary-color-hsl, 0.08);
            }

            &[destructive] {
                &::before {
                    background: hslColor(--button-destructive-color-hsl, 0.08);
                }
            }

            &[inverted] {
                &::before {
                    background: hslColor(--button-secondary-color-hsl, 0.08);
                }
            }
        }
        &:active,
        &.active {
            &::before {
                background: hslColor(--button-primary-color-hsl, 0.16);
            }

            &[destructive] {
                &::before {
                    background: hslColor(--button-destructive-color-hsl, 0.16);
                }
            }

            &[inverted] {
                &::before {
                    background: hslColor(--button-secondary-color-hsl, 0.16);
                }
            }
        }
        &:focus,
        &.focus {
            &::after {
                border-width: 2px;
            }
        }
        &:focus:not(:focus-visible) {
            &::after {
                border-width: 1px;
            }
        }
        &:focus-visible {
            &::after {
                border-width: 2px;
            }
        }

        &[disabled] {
            cursor: not-allowed;

            &,
            &:hover,
            &.hover,
            &:focus,
            &:focus-visible,
            &.focus,
            &:active,
            &.active {
                color: hslColor(--button-neutral-color-hsl, 0.32);
                background: transparent;

                &::before,
                &::after {
                    border: none;
                    background: none;
                }

                &::after {
                    border: 1px solid hslColor(--button-neutral-color-hsl, 0.32);
                }
            }
        }
    }

    // sizes (xsmall, small (default), large, full width)
    &__xsmall {
        padding: 10px 12px;
        height: 32px;
    }
    &,
    &__small {
        padding: 10px 12px;
        height: 32px;
    }
    &__large {
        padding: 14px 20px;
        height: 48px;
    }
    &__fullWidth {
        width: 100%;

        .Button_icon {
            flex-shrink: 1;
        }
        .Button_label {
            flex-grow: 1;
        }
    }

    // animation
    .enable-animations & {
        &::before {
            transition: background $animation-speed-shorter 0s ease-in-out;
        }
        &::after {
            transition: border-color $animation-speed-shorter 0s ease-in-out,
                border-width $animation-speed-shorter 0s ease-in-out;
        }
    }
}
